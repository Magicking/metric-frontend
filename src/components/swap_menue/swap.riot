<swap>

  <div id="swap-form">

    <div class="section" if={ isOrderBookFeatureEnabled() }>
      <div class="trade-options">
        <div class={ state.isLimitOrder ? "trade-option-button" : "trade-option-active-button" } onclick={ switchToQuickSwap }>Quick Swap</div>
        <div>/</div>
        <div class={ state.isLimitOrder ? "trade-option-active-button" :  "trade-option-button" } onclick={ switchToLimitOrder }>Limit orders</div>
      </div>
    </div>

    <div class="section">
      <div class="direction-title">
        <div>From</div>
        <div class="balance-link" onclick={ balanceClickInputAmount } if={state.inputToken !== null && state.inputToken.balance > 0}>Balance: {this.round(state.inputToken.balance, 4)}</div>
      </div>
      <div class="input-container">
        <label class="currency" onclick={ openInputSelector }>{ inputSymbol() }</label>
        <input type="number" class="input-amount" value={ this.round(state.inputAmount, 4) } onkeyup={ updateInputAmount } placeholder="0">
        <div class="direction-title usd-price">{state.inputTokenUsd}</div>
      </div>
    </div>

    <div class="section switch">
      <div class="switch-button-image" onclick={ switchDirection }></div>
    </div>

    <div class="section">
      <div class="direction-title">
        <div>To</div>
        <div if= { isOutputDefined() && state.outputToken.balance > 0 }>Balance: { this.round(state.outputToken.balance, 4)}</div>
      </div>
      <div class="input-container">
        <label class="currency" onclick={ openOutputSelector }>{ outputSymbol() }</label>
        <input type="number" disabled="disabled" class="output-amount" value={ outputAmount() } placeholder="0">
        <div class="direction-title usd-price">{state.outputTokenUsd}</div>
      </div>
    </div>

    <div class="swap-button" onclick={ buttonAction }>{ buttonText() }</div>
  </div>

  <swap-price
          if={ canOutput() && state.conversionRate !== undefined }
          inputToken={ state.inputToken }
          outputToken={ state.outputToken }
          conversionRate={ state.conversionRate }
          amount={ state.inputAmount }
          metricBalance={ state.metricBalance }
  />

  <order-book
          if={ state.isLimitOrder && state.outputToken !== null && state.inputToken !== null }
          inputToken = { state.inputToken }
          outputToken = { state.outputToken }
  />

  <token-selector
          if={ state.showTokenSelector }
          closeTokenSelector={ closeTokenSelector }
          selectToken={ selectToken }
  />

  <script>
    import './swap.css'
    import OrderBook from '../order_book/orderbook.riot'
    import SwapPrice from '../swap_price/swap_price.riot'
    import TokenSelector from '../token_selector/token_selector.riot'

    export default {

      components: {
        OrderBook,
        SwapPrice,
        TokenSelector
      },

      config: {
        isLimitOrder: false,
        oneSplitAddress: "0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e",
        referralAddress: "0x52427b0035F494a21a0A4A1AbE04d679f789c821", // build deployer
        swapFee: (3000000000000000).toString(),
        oneSplitAbi: [ { "constant": true, "inputs": [ { "internalType": "contract IERC20", "name": "fromToken", "type": "address" }, { "internalType": "contract IERC20", "name": "destToken", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "parts", "type": "uint256" }, { "internalType": "uint256", "name": "flags", "type": "uint256" } ], "name": "getExpectedReturn", "outputs": [ { "internalType": "uint256", "name": "returnAmount", "type": "uint256" }, { "internalType": "uint256[]", "name": "distribution", "type": "uint256[]" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "internalType": "contract IERC20", "name": "fromToken", "type": "address" }, { "internalType": "contract IERC20", "name": "destToken", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }, { "internalType": "uint256", "name": "minReturn", "type": "uint256" }, { "internalType": "uint256[]", "name": "distribution", "type": "uint256[]" }, { "internalType": "uint256", "name": "flags", "type": "uint256" }, { "internalType": "address", "name": "referral", "type": "address" }, { "internalType": "uint256", "name": "feePercent", "type": "uint256" } ], "name": "swapWithReferral", "outputs": [ { "internalType": "uint256", "name": "", "type": "uint256" } ], "payable": true, "stateMutability": "payable", "type": "function" } ]
      },

      state: {
        isApproved: true,
        inputAmount: 0,
        inputUsd: null,
        outputUsd: null,
        outputToken: null,
        showTokenSelector: false
      },

      onBeforeMount() {
        this.state.inputToken = this.nativeTokens.ethereum
      },

      onBeforeUpdate() {

        if (this.state.inputToken !== null) {
          let updateInputToken = this.tokensList().find(t => t.symbol === this.state.inputToken.symbol)
          if (updateInputToken !== undefined) {
            this.state.inputToken.balance = updateInputToken.balance
          }
        }

        if (this.state.outputToken !== null) {
          let updateOutputToken = this.tokensList().find(t => t.symbol === this.state.outputToken.symbol)
          if (updateOutputToken !== undefined) {
            this.state.outputToken.balance = updateOutputToken.balance
          }
        }

      },

      onMounted() {
        this.updatePriceAndReschedule()
        this.updateMeticBalanceAndReschedule()
      },

      openInputSelector() {
        this.state.pendingTokenSelection = "input"
        this.openTokenSelector()
      },

      openOutputSelector() {
        this.state.pendingTokenSelection = "output"
        this.openTokenSelector()
      },

      openTokenSelector() {
          this.update({ showTokenSelector: true });
      },

      closeTokenSelector() {
        this.update({ showTokenSelector: false });
      },

      async selectToken(token) {

        if (this.state.pendingTokenSelection === "input") {
          this.update({ inputToken: token, inputUsd: null })

          await this.inputAmountParse(this.state.inputAmount)
        } else {
          this.update({ outputToken: token, outputUsd: null })
        }

        this.closeTokenSelector()
        this.loadApproval()
      },

      updateMetricBalance() {
        if (this.accountAddress() !== undefined && this.inputToken !== null) {
          this.erc20Contract(this.nativeTokens.metric.address).methods.balanceOf(this.accountAddress()).call().then((balance) => {
            const cleanedBalance = isNaN(balance) ? 0 : this.round(balance / (10 ** 18), 4);
            this.update({ metricBalance: cleanedBalance })
          })
        }
      },

      erc20Contract(contractAddress) {
        return this.getContract(this.erc20Abi, contractAddress)
      },

      oneSplitContract() {
        return this.getContract(this.config.oneSplitAbi, this.config.oneSplitAddress)
      },

      getContract(abi, address) {
        return new window.web3.eth.Contract(abi, address)
      },

      sendSwap() {
        var inputWei = (this.state.inputAmount * (10**this.state.inputToken.decimals)).toLocaleString("fullwide", { useGrouping: false })
        var ethAmount = (this.state.inputToken.symbol === "ETH") ? inputWei : 0
        var swapFee = this.state.metricBalance >= 100 ? 0 : this.config.swapFee

        this.oneSplitContract().methods.swapWithReferral(
          this.state.inputToken.address,
          this.state.outputToken.address,
          inputWei,
          0,
          this.state.swapDistribution,
          0,
          this.config.referralAddress,
          swapFee
        ).send({ from: this.accountAddress(), value: ethAmount })
      },

      updatePriceAndReschedule() {
        this.updatePrice()
        let that = this
        setTimeout(function () {
          that.updatePriceAndReschedule()
        }, 1000)
      },

      updateMeticBalanceAndReschedule() {
        this.updateMetricBalance()
        let that = this

        setTimeout(function () {
          that.updateMeticBalanceAndReschedule()
        }, 5000)
      },

      isOrderBookFeatureEnabled() {
        return window.location.host !== "metric.exchange"
      },

      updatePrice() {
        if(this.canOutput() && this.state.inputToken !== null) {

          var inputToken = this.state.inputToken
          var outputToken = this.state.outputToken
          var that = this

          this.oneSplitContract().methods.getExpectedReturn(
            inputToken.address,
            outputToken.address,
            (this.state.inputAmount * (10**inputToken.decimals)).toLocaleString("fullwide", { useGrouping: false }),
            "4",
            "0"
          ).call().then(async (result) => {
            var outputAmount = isNaN(result[0]) ? 0 : parseInt(result[0]) / (10**outputToken.decimals)
            var conversionRate = outputAmount / that.state.inputAmount
            var outputusd = ""
            if (this.canOutput()){
              if (this.state.outputUsd === null){
                this.state.outputUsd = await this.getTokenUsdPrice(this.state.outputToken)
              }
              var total = this.state.outputUsd * outputAmount;
              if (total > 0){
                outputusd = `â‰ˆ $${this.round(this.state.outputUsd * outputAmount, 2)}`
              }
            }
            that.update({
              conversionRate: conversionRate,
              outputTokenUsd: outputusd,
              swapDistribution: result[1]
            })
          })
        }
        else{
          this.update({
              outputTokenUsd: "",
              outputUsd: null
          })
        }
      },

      updateInputAmount(e) {
        this.inputAmountParse(e.target.value)
      },

      balanceClickInputAmount(){
        this.inputAmountParse(this.state.inputToken.balance)
      },

      async inputAmountParse(val){
        let input = isNaN(val) ? 0 : parseFloat(val)
        input = isNaN(input) ? 0 : input

        var inputusd = ''
        if (this.state.inputUsd === null)
        {
          this.state.inputUsd = await this.getTokenUsdPrice(this.state.inputToken);
        }

        if (this.state.inputUsd * input > 0){
            inputusd = `â‰ˆ $${this.round(this.state.inputUsd * input, 2)}`
          }

        this.update({inputAmount: input, inputTokenUsd: inputusd})
      },

      async getTokenUsdPrice(token) {
        if (token === null){
          return 0
        }
        var apiurl=""
        if (token.symbol.toLowerCase() === 'eth'){
          apiurl ="https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd&include_market_cap=false&include_24hr_vol=false&include_24hr_change=false&include_last_updated_at=false"
        }
        else{
          apiurl = `https://api.coingecko.com/api/v3/simple/token_price/ethereum?contract_addresses=${token.address}&vs_currencies=usd`
        }
        var res = await fetch(apiurl, {
          method: "GET"
        })

        var jsonRes = await res.json()

        if (token.symbol.toLowerCase() === 'eth'){
          return jsonRes["ethereum"].usd
        }
        if (typeof jsonRes[`${token.address.toLowerCase()}`] === undefined){
          return 0
        }
        return jsonRes[`${token.address.toLowerCase()}`].usd
      },

      isOutputDefined() {
        return (this.state.outputToken !== null)
      },

      canOutput() {
        return (this.state.inputToken !== null && this.state.outputToken !== null && this.state.inputAmount > 0)
      },

      outputAmount() {
        if(this.canOutput() && this.state.conversionRate !== undefined) {
          return this.round(this.state.inputAmount * this.state.conversionRate, 4)
        } else {
          return null
        }
      },

      inputSymbol() {
        return this.state.inputToken ? this.state.inputToken.symbol : "SELECT TOKEN Ë…"
      },

      outputSymbol() {
        return this.state.outputToken ? this.state.outputToken.symbol : "SELECT TOKEN Ë…"
      },

      loadApproval() {
        if (this.state.inputToken !== undefined && this.state.inputToken !== null) {
          if (this.state.inputToken.symbol !== "ETH") {
            this.erc20Contract(this.state.inputToken.address).methods.allowance(this.accountAddress(), this.config.oneSplitAddress).call().then((allowance) => {
              var approved = (allowance > 1000000000000000000000000000)
              this.update({ isApproved: approved })
            })
          } else {
            this.update({ isApproved: true })
          }
        }

        var that = this
        setTimeout(function () {
          that.loadApproval()
        }, 3000)
      },

      buttonText() {
        if (!this.isWalletConnected()) {
          return "CONNECT WALLET"
        }

        if (this.state.outputToken === null) {
          return "SELECT TOKEN"
        }

        if (this.state.isApproved) {
          if (this.state.isLimitOrder) {
            return "PLACE ORDER"
          } else {
            return "SWAP"
          }
        }

        return "APPROVE"
      },

      sendApproveToken() {
        this.erc20Contract(this.state.inputToken.address).methods.approve(this.config.oneSplitAddress, window.web3.utils.toBN("10000000000000000000000000000")).send({ from: this.accountAddress() })
      },

      buttonAction() {
        if (!this.isWalletConnected()) {
          this.connectWallet()
        } else {
          if (!this.state.isApproved) {
            this.sendApproveToken()
          }

          else if (this.state.inputToken && this.state.outputToken) {
            this.sendSwap()
          }
        }
      },

      async switchDirection() {
        var inputToken = this.state.inputToken
        var outputToken = this.state.outputToken

        this.update({
          inputToken: outputToken,
          outputToken: inputToken,
          inputUsd : null,
          outputUsd: null
        })

        this.inputAmountParse(this.state.inputAmount)

        this.loadApproval()
      },

      switchToQuickSwap() {
        this.state.isLimitOrder = false;
        this.update();
      },

      async switchToLimitOrder() {
        this.state.isLimitOrder = true;
        this.update();
      }
    }
  </script>

</swap>
