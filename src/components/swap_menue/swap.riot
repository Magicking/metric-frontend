<swap>

  <div id="dashboard">

    <div id="swap-form">

      <div class="section">
        <div class="direction-title">
          <div>From</div>
          <div class="balance-link" onclick={ balanceClickInputAmount } if={state.inputToken !== null && state.inputToken.balance > 0}>Balance: {this.round(state.inputToken.balance, 4)}</div>
        </div>
        <div class="input-container">
          <label class="currency" onclick={ openInputSelector }>{ inputSymbol() }</label>
          <input type="number" class="input-amount" value={ this.round(state.inputAmount, 4) } onkeyup={ updateInputAmount } placeholder="0">
          <div class="direction-title usd-price">{state.inputTokenUsd === 0 ? null : state.inputTokenUsd}</div>
        </div>
      </div>

      <div class="section switch">
        <div class="switch-button-image" onclick={ switchDirection }></div>
      </div>

      <div class="section">
        <div class="direction-title">
          <div>To</div>
          <div if= { isOutputDefined() && state.outputToken.balance > 0 }>Balance: { this.round(state.outputToken.balance, 4)}</div>
        </div>
        <div class="input-container">
          <label class="currency" onclick={ openOutputSelector }>{ outputSymbol() }</label>
          <input type="number" id="output-token-field" class="output-amount" value={ outputAmount() } onkeyup={ updateOutputAmount } placeholder="0">
          <div class="direction-title usd-price">{state.outputTokenUsd === 0 ? null : state.outputTokenUsd}</div>
        </div>
      </div>

      <div class="swap-button" onclick={ buttonAction }>{ buttonText() }</div>
    </div>

    <swap-price
              if="{ canOutput() && state.isLimitOrder === false && state.conversionRate !== undefined }"
              inputToken={ state.inputToken }
              outputToken={ state.outputToken }
              conversionRate={ state.conversionRate }
              amount={ state.inputAmount }
              metricBalance={ fetchMetricBalance() }
      />

    <div class="order-book" if={ state.isLimitOrder && state.outputToken !== null && state.inputToken !== null }>
      <order-book
              inputToken = { state.inputToken }
              outputToken = { state.outputToken }
      />
    </div>

    <div class="order-list" if={ state.isLimitOrder && state.outputToken !== null && state.inputToken !== null }>
      <order-list
              inputToken = { state.inputToken }
              outputToken = { state.outputToken }
      />
    </div>

    <div id="selector-box" style={ (state.showTokenSelector) ? "display:block" : "display:none" }>
      <token-selector
              closeTokenSelector={ closeTokenSelector }
              selectToken={ selectToken }
      />
    </div>
  </div>

  <script>
    import './swap.css'
    import OrderBook from '../order_book/orderbook.riot'
    import SwapPrice from '../swap_price/swap_price.riot'
    import TokenSelector from '../token_selector/token_selector.riot'
    import OrderList from '../order_list/order_list.riot'
    import { getTokenUsdPrice } from '../../common/token_price_proxy'
    import { ZeroXOrdersProxy } from '../../common/0x_orders_proxy'
    import { OneSplitContactProxy } from '../../common/one_split_contract_proxy'
    import { Erc20ContractProxy } from '../../common/erc20_contract_proxy'
    import { BigNumber } from '@0x/utils';

    export default {

      components: {
        OrderBook,
        SwapPrice,
        TokenSelector,
        OrderList
      },

      config: {
        referralAddress: "0x52427b0035F494a21a0A4A1AbE04d679f789c821", // build deployer
        swapFee: 0.003
      },

      state: {
        isLimitOrder: false,
        isApproved: true,
        inputAmount: 0,
        outputAmount: 0,
        inputTokenUsd: 0,
        outputTokenUsd: 0,
        showTokenSelector: false,
        inputToken: null,
        outputToken: null
      },

      onBeforeUpdate() {

        if (this.state.inputToken !== null) {
          let updateInputToken = this.tokensList().find(t => t.symbol === this.state.inputToken.symbol)
          if (updateInputToken !== undefined) {
            this.state.inputToken.balance = updateInputToken.balance
          }
        }

        if (this.state.outputToken !== null) {
          let updateOutputToken = this.tokensList().find(t => t.symbol === this.state.outputToken.symbol)
          if (updateOutputToken !== undefined) {
            this.state.outputToken.balance = updateOutputToken.balance
          }
        }

      },

      onBeforeMount() {
        if (this.state.inputToken === null) {
          let token = this.tokensList().find(t => t.symbol.toLowerCase() === "metric")
          this.state.inputToken = token === undefined ? null : token
        }

        if (this.state.outputToken === null) {
          let token = this.tokensList().find(t => t.symbol.toLowerCase() === "build")
          this.state.outputToken = token === undefined ? null : token
        }

        if (this.isOrderBookFeatureEnabled()) {
          this.state.isLimitOrder = true
        }
      },

      onMounted() {

        this.switchOrderType(!this.state.isLimitOrder)

        this.updatePriceAndReschedule()
      },

      openInputSelector() {
        this.state.pendingTokenSelection = "input"
        this.openTokenSelector()
      },

      openOutputSelector() {
        this.state.pendingTokenSelection = "output"
        this.openTokenSelector()
      },

      openTokenSelector() {
          this.update({ showTokenSelector: true });
      },

      closeTokenSelector() {
        this.update({ showTokenSelector: false });
      },

      async selectToken(token) {

        if (this.state.pendingTokenSelection === "input") {
          this.update({ inputToken: token, inputTokenUsd: 0, inputAmount: 0 })
        } else {
          this.update({ outputToken: token, outputTokenUsd: 0, outputAmount: 0 })
        }

        this.closeTokenSelector()
        await this.loadApproval()
      },

      sendSwap() {
        var inputWei = (this.state.inputAmount * (10**this.state.inputToken.decimals)).toLocaleString("fullwide", { useGrouping: false })
        var ethAmount = (this.state.inputToken.symbol === "ETH") ? inputWei : 0

        OneSplitContactProxy.oneSplitContract().methods.swapWithReferral(
          this.state.inputToken.address,
          this.state.outputToken.address,
          inputWei,
          0,
          this.state.swapDistribution,
          0,
          this.config.referralAddress,
          (this.calculateMetricFee() * (10 ** 18)).toString()
        ).send({ from: this.accountAddress(), value: ethAmount })
      },

      fetchMetricBalance() {

        let metric = this.tokensList().find(t => t.symbol.toLowerCase() === "metric")

        if (metric !== undefined) {
          return metric.balance
        }

        return 0
      },

      async updatePriceAndReschedule() {
        await this.updatePrice()
        let that = this
        setTimeout(async function () {
          await that.updatePriceAndReschedule()
        }, 1000)
      },

      isOrderBookFeatureEnabled() {
        return window.location.host !== "metric.exchange"
      },

      async updatePrice() {
        if (!this.state.isLimitOrder) {
          if (this.canOutput()) {

            let inputToken = this.state.inputToken
            let outputToken = this.state.outputToken
            let result = await OneSplitContactProxy.oneSplitContract().methods.getExpectedReturn(
                    inputToken.address,
                    outputToken.address,
                    (this.state.inputAmount * (10 ** inputToken.decimals)).toLocaleString("fullwide", {useGrouping: false}),
                    "4",
                    "0"
            ).call()

            let outputAmount = isNaN(result[0]) ? 0 : parseInt(result[0]) / (10 ** outputToken.decimals)
            let conversionRate = outputAmount / this.state.inputAmount

            let usdPrice = await getTokenUsdPrice(outputToken.address, outputToken.symbol)

            var usdAmount = usdPrice * outputAmount;
            if (usdAmount > 0) {
              usdAmount = `â‰ˆ $${this.round(usdPrice * outputAmount, 2)}`
            }

            this.update({
              conversionRate: conversionRate,
              outputAmount: outputAmount,
              outputTokenUsd: usdAmount,
              swapDistribution: result[1]
            })

          } else {
            this.update({
              outputAmount: 0,
              outputTokenUsd: 0
            })
          }
        } else {
          this.update()
        }
      },

      async updateInputAmount(e) {
        let token = this.state.inputToken
        token.amount = e.target.value

        let amount = this.amountParse(token)
        this.update( {inputAmount: amount})

        let amountUsd = await this.amountConvertToUsd(token, amount)
        this.update( {inputTokenUsd: amountUsd})
      },

      async updateOutputAmount(e) {
        let token = this.state.outputToken
        token.amount = e.target.value

        let amount = this.amountParse(token)
        this.update( {outputAmount: amount})

        let amountUsd = await this.amountConvertToUsd(token, amount)
        this.update( {outputTokenUsd: amountUsd})
      },

      async balanceClickInputAmount(){
        let token = this.state.inputToken
        token.amount = this.state.inputToken.balance

        let amount = this.amountParse(token)
        this.update( {inputAmount: amount})

        let amountUsd = await this.amountConvertToUsd(token, amount)
        this.update( {inputTokenUsd: amountUsd})
      },

      amountParse(token){
        let amountUsd = token.amountUsd
        let amount = isNaN(token.amount) ? 0 : parseFloat(token.amount)
        return isNaN(amount) ? 0 : amount
      },

      async amountConvertToUsd(token, amount){
        let amountUsd = token.amountUsd
        let priceUsd = await getTokenUsdPrice(token.address, token.symbol);

        if (priceUsd * amount > 0){
          amountUsd = `â‰ˆ $${this.round(priceUsd * amount, 2)}`
        }

        return amountUsd
      },

      isOutputDefined() {
        return (this.state.outputToken !== null)
      },

      canOutput() {
        return (this.state.inputToken !== null && this.state.outputToken !== null && this.state.inputAmount > 0)
      },

      outputAmount() {
        if (this.state.isLimitOrder) {
          return this.round(this.state.outputAmount, 4)
        }
        else if(this.canOutput() && this.state.conversionRate !== undefined) {
          return this.round(this.state.inputAmount * this.state.conversionRate, 4)
        } else {
          return 0
        }
      },

      inputSymbol() {
        return this.state.inputToken ? this.state.inputToken.symbol : "SELECT TOKEN Ë…"
      },

      outputSymbol() {
        return this.state.outputToken ? this.state.outputToken.symbol : "SELECT TOKEN Ë…"
      },

      async loadApproval() {

        if (this.state.inputToken !== undefined && this.state.inputAmount > 0) {
          if (this.state.isLimitOrder) {
            this.update({ isApproved: await ZeroXOrdersProxy.is0xApprovedForToken(this.state.inputToken.address, this.state.inputAmount * (10 ** this.state.inputToken.decimals)) })
          } else {
            this.update({ isApproved: await OneSplitContactProxy.isOneSplitApprovedForTokenAddress(this.state.inputToken.address, this.state.inputAmount * (10 ** this.state.inputToken.decimals)) })
          }
        }

        let that = this
        setTimeout(function () {
          that.loadApproval()
        }, 3000)
      },

      buttonText() {
        if (!this.isWalletConnected()) {
          return "CONNECT WALLET"
        }

        if (this.state.outputToken === null) {
          return "SELECT TOKEN"
        }

        if (this.state.isApproved) {
          if (this.state.isLimitOrder) {
            return "PLACE ORDER"
          } else {
            return "SWAP"
          }
        }

        return "APPROVE"
      },

      async buttonAction() {
        if (!this.isWalletConnected()) {
          await this.connectWallet()
        } else {
          if (!this.state.isApproved) {
            if (this.state.isLimitOrder) {
              await ZeroXOrdersProxy.approveZeroXAllowance(this.state.inputToken.address)
            } else {
              await OneSplitContactProxy.approveOneSplitForToken(this.state.inputToken.address)
            }
          } else if (this.state.inputToken && this.state.outputToken) {
            if (this.state.isLimitOrder) {
              await ZeroXOrdersProxy.submitOrder(
                {
                  makerAssetAmount: new BigNumber(this.state.inputAmount * (10 ** this.state.inputToken.decimals)),
                  makerAssetAddress: this.state.inputToken.address,
                  takerAssetAmount: new BigNumber(this.state.outputAmount * (10 ** this.state.outputToken.decimals)),
                  takerAssetAddress: this.state.outputToken.address
                },
                this.config.referralAddress,
                this.calculateMetricFee()
              )
            } else {
              this.sendSwap()
            }
          }
        }
      },

      async switchDirection() {
        let inputToken = this.state.inputToken
        let outputToken = this.state.outputToken

        let inputAmount = this.state.inputAmount
        let outputAmount = this.state.outputAmount

        let inputTokenUsd = this.state.inputTokenUsd
        let outputTokenUsd = this.state.outputTokenUsd

        this.update({
          inputToken: outputToken,
          inputAmount: outputAmount,
          inputTokenUsd: outputTokenUsd,
          outputToken: inputToken,
          outputAmount: inputAmount,
          outputTokenUsd: inputTokenUsd
        })

        await this.loadApproval()
      },

      switchToQuickSwap() {
        this.switchOrderType(true)
      },

      switchToLimitOrder() {
        this.switchOrderType(false)
      },

      switchOrderType(isSwap){

        this.state.isLimitOrder = !isSwap

        document.getElementById("output-token-field").disabled = isSwap

        if (this.state.isLimitOrder) {
          console.log("set class")
          document.getElementById("dashboard").classList.toggle("dashboard")
          document.getElementById("swap-form").classList.toggle("order-form")
          document.getElementById("selector-box").classList.toggle("order-box")
        } else {
          document.getElementById("selector-box").classList.toggle("swap-box")
          document.getElementById("swap-form").classList.toggle("swap-form")
        }

        this.update()
      },
      calculateMetricFee() {
        return this.fetchMetricBalance() >= 100 ? 0 : this.config.swapFee
      }
    }
  </script>

</swap>
