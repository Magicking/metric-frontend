<order-book>

    <div id="order-table-canvas" onscroll={ disableScrollToView }>
        <table class="orders">
            <thead class="order-book-columns">
            <tr id="order-book-header">
                <th>Price { state.outputToken.symbol }</th>
                <th>Amount { state.inputToken.symbol }</th>
                <th>Total { state.outputToken.symbol }</th>
            </tr>
            </thead>
            <tbody>
            <tr each="{ask in state.asks}" class="ask">
                <td>{ ask.price.toFixed(config.displayedDecimalPoints) }</td>
                <td>{ ask.volumeTaker.toFixed(config.displayedDecimalPoints) }</td>
                <td>{ ask.volumeMaker.toFixed(config.displayedDecimalPoints) }</td>
            </tr>
            <tr id="orders-separator"/>
            <tr each="{bid in state.bids}" class="bid">
                <td>{ bid.price.toFixed(config.displayedDecimalPoints) }</td>
                <td>{ bid.volumeTaker.toFixed(config.displayedDecimalPoints) }</td>
                <td>{ bid.volumeMaker.toFixed(config.displayedDecimalPoints) }</td>
            </tr>
            </tbody>
        </table>
    </div>

    <script>
        import './orderbook.css'
        import {
            getBaseToken,
            getOrderBookAsks,
            getOrderBookBids, getQuoteToken,
            registerForOrderBookUpdateEvents
        } from "../../../common/0x_order_book_proxy";

        export default {
            config: {
                displayedDecimalPoints: 3
            },
            state: {
                asks: [],
                bids: [],
                triggerScrollToView: true,
            },
            onBeforeMount() {
                this.state.inputToken = getBaseToken()
                this.state.outputToken = getQuoteToken()
            },
            onMounted() {
                registerForOrderBookUpdateEvents(this)
            },
            async onBeforeUpdate() {

                if (this.state.inputToken !== getBaseToken() || this.state.outputToken !== getQuoteToken()) {
                    this.state.triggerScrollToView = true
                }

                this.state.inputToken = getBaseToken()
                this.state.outputToken = getQuoteToken()

                this.fetchOrderBook(this.state.inputToken, this.state.outputToken)
            },
            onUpdated() {
                if (this.state.triggerScrollToView) {
                    this.scrollOrderBookIntoView()
                }
            },
            disableScrollToView() {
                this.state.triggerScrollToView = false
            },
            fetchOrderBook(inputToken, outputToken) {

                if (inputToken !== null && outputToken !== null) {

                    let asks =
                        getOrderBookAsks().map(b => {
                            return {
                                makerAssetAmount: parseFloat((parseInt(b.order.takerAssetAmount) / (10 ** outputToken.decimals))),
                                takerAssetAmount: parseFloat(parseInt(b.order.makerAssetAmount) / (10 ** inputToken.decimals))
                            }
                        })

                    let bids =
                        getOrderBookBids().map(b => {
                            return {
                                makerAssetAmount: parseFloat((parseInt(b.order.makerAssetAmount) / (10 ** outputToken.decimals))),
                                takerAssetAmount: parseFloat(parseInt(b.order.takerAssetAmount) / (10 ** inputToken.decimals))
                            }
                        })

                    Array.prototype.sumByPrice = function() {
                        return Object.values(this.reduce(function(groups, item) {
                            const key = parseFloat(item.price).toFixed(3)
                            groups[key] = groups[key] || {price: key, volumeMaker: 0, volumeTaker: 0}
                            groups[key] = {
                                price: parseFloat(key),
                                volumeMaker: item.volumeMaker + groups[key].volumeMaker,
                                volumeTaker: item.volumeTaker + groups[key].volumeTaker
                            }
                            return groups
                        }, {}))
                    }

                    Array.prototype.extractPriceAndVolume = function() {
                        return this.map(r => {
                                return {
                                    price: parseFloat(r.makerAssetAmount / r.takerAssetAmount),
                                    volumeMaker: r.makerAssetAmount,
                                    volumeTaker: r.takerAssetAmount
                                }
                            }
                        )};


                    this.state.bids =
                        bids
                            .extractPriceAndVolume()
                            .sumByPrice()
                            .sort((a, b) => b.price - a.price)

                    this.state.asks =
                        asks
                            .extractPriceAndVolume()
                            .sumByPrice()
                            .sort((a, b) => b.price - a.price)
                }
            },

            scrollOrderBookIntoView() {
                let tableHeader = document.getElementById("order-book-header");
                let orderBookSeparator = document.getElementById("orders-separator");
                let visibleOrderBookRegion = document.getElementById("order-table-canvas");

                let tableHeaderSize = $(tableHeader).height();
                let containerHeight = $(visibleOrderBookRegion).height() - tableHeaderSize;
                let elemTop = orderBookSeparator.offsetTop - tableHeaderSize;

                if (elemTop > containerHeight) {
                    $(visibleOrderBookRegion).scrollTop(elemTop - containerHeight / 2);
                }
            }
        }

    </script>
</order-book>
